"use strict";
const models_1 = require("../models");
const userController = {
    async getAllUsers(req, res) {
        try {
            const users = await models_1.User.find({}).populate("thoughts");
            res.json(users);
        }
        catch (err) {
            if (err)
                throw err;
        }
    },
    async getUser({ params }, res) {
        try {
            const user = await models_1.User.findById(params.id).populate("thoughts");
            if (!user) {
                res.status(404).send(`User Not Found`);
                return;
            }
            res.json(user);
        }
        catch (err) {
            if (err)
                throw err;
        }
    },
    async createUser({ body }, res) {
        try {
            const newUser = await models_1.User.create(body);
            res.status(201).send(`User ${newUser.username} created`);
        }
        catch (err) {
            if (err)
                throw err;
        }
    },
    async updateUser({ params, body }, res) {
        try {
            const user = await models_1.User.findByIdAndUpdate(params.id, body);
            if (!user) {
                res.status(404).send(`User Not Found`);
                return;
            }
            res.status(200).send(`User ${user} updated`);
        }
        catch (err) {
            if (err)
                throw err;
        }
    },
    async deleteUser({ params }, res) {
        try {
            const user = await models_1.User.findById(params.id);
            user.thoughts.map(async (thought) => {
                await models_1.Thoughts.findByIdAndDelete(thought);
            });
            const deletedUser = await models_1.User.findByIdAndDelete(params.id);
            res.status(200).send(`User #${params.id} deleted`);
        }
        catch (err) {
            if (err)
                throw err;
        }
    },
    async addFriend({ params }, res) {
        try {
            const user = await models_1.User.findById(params.id);
            user.friends.push(params.friendId);
            user.save();
            res.status(200).send(`Friend Removed`);
        }
        catch (err) { }
    },
    async removeFriend({ params }, res) {
        try {
            const user = await models_1.User.findByIdAndUpdate(params.id, {
                $pull: { friends: params.friendId },
            });
            res.status(200).send(`Friend Removed`);
        }
        catch (err) { }
    },
};
module.exports = userController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnRyb2xsZXJzL3VzZXItY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsc0NBQTJDO0FBRTNDLE1BQU0sY0FBYyxHQUFHO0lBRXJCLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLEdBQUc7UUFDeEIsSUFBSTtZQUNGLE1BQU0sS0FBSyxHQUFHLE1BQU0sYUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDdkQsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNqQjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxHQUFHO2dCQUFFLE1BQU0sR0FBRyxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztJQUdELEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxHQUFHO1FBQzNCLElBQUk7WUFDRixNQUFNLElBQUksR0FBRyxNQUFNLGFBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNqRSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNULEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQ3ZDLE9BQU87YUFDUjtZQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEI7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLElBQUksR0FBRztnQkFBRSxNQUFNLEdBQUcsQ0FBQztTQUNwQjtJQUNILENBQUM7SUFHRCxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsR0FBRztRQUM1QixJQUFJO1lBQ0YsTUFBTSxPQUFPLEdBQUcsTUFBTSxhQUFJLENB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cnQgeyBUaG91Z2h0cywgVXNlciB9IGZyb20gXCIuLi9tb2RlbHNcIjtcclxuXHJcbmNvbnN0IHVzZXJDb250cm9sbGVyID0ge1xyXG4gIC8vIGdldCBhbGwgdXNlcnMgZGF0YVxyXG4gIGFzeW5jIGdldEFsbFVzZXJzKHJlcSwgcmVzKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCB1c2VycyA9IGF3YWl0IFVzZXIuZmluZCh7fSkucG9wdWxhdGUoXCJ0aG91Z2h0c1wiKTtcclxuICAgICAgcmVzLmpzb24odXNlcnMpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGlmIChlcnIpIHRocm93IGVycjtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICAvLyBnZXQgc2luZ2xlIHVzZXIgZGF0YSBmcm9tIGlkXHJcbiAgYXN5bmMgZ2V0VXNlcih7IHBhcmFtcyB9LCByZXMpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRCeUlkKHBhcmFtcy5pZCkucG9wdWxhdGUoXCJ0aG91Z2h0c1wiKTtcclxuICAgICAgaWYgKCF1c2VyKSB7XHJcbiAgICAgICAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoYFVzZXIgTm90IEZvdW5kYCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIHJlcy5qc29uKHVzZXIpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGlmIChlcnIpIHRocm93IGVycjtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICAvLyBjcmVhdGUgbmV3IHVzZXJcclxuICBhc3luYyBjcmVhdGVVc2VyKHsgYm9keSB9LCByZXMpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IG5ld1VzZXIgPSBhd2FpdCBVc2VyLmNyZWF0ZShib2R5KTtcclxuICAgICAgcmVzLnN0YXR1cygyMDEpLnNlbmQoYFVzZXIgJHtuZXdVc2VyLnVzZXJuYW1lfSBjcmVhdGVkYCk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgaWYgKGVycikgdGhyb3cgZXJyO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIC8vIHVwZGF0ZSB1c2VyIGRhdGFcclxuICBhc3luYyB1cGRhdGVVc2VyKHsgcGFyYW1zLCBib2R5IH0sIHJlcykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZEJ5SWRBbmRVcGRhdGUocGFyYW1zLmlkLCBib2R5KTtcclxuICAgICAgaWYgKCF1c2VyKSB7XHJcbiAgICAgICAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoYFVzZXIgTm90IEZvdW5kYCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKGBVc2VyICR7dXNlcn0gdXBkYXRlZGApO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGlmIChlcnIpIHRocm93IGVycjtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICAvLyBkZWxldGUgdXNlciBkYXRhXHJcbiAgYXN5bmMgZGVsZXRlVXNlcih7IHBhcmFtcyB9LCByZXMpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRCeUlkKHBhcmFtcy5pZCk7XHJcbiAgICAgIHVzZXIudGhvdWdodHMubWFwKGFzeW5jICh0aG91Z2h0KSA9PiB7XHJcbiAgICAgICAgYXdhaXQgVGhvdWdodHMuZmluZEJ5SWRBbmREZWxldGUodGhvdWdodCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zdCBkZWxldGVkVXNlciA9IGF3YWl0IFVzZXIuZmluZEJ5SWRBbmREZWxldGUocGFyYW1zLmlkKTtcclxuICAgICAgcmVzLnN0YXR1cygyMDApLnNlbmQoYFVzZXIgIyR7cGFyYW1zLmlkfSBkZWxldGVkYCk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgaWYgKGVycikgdGhyb3cgZXJyO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIC8vIGFkZCBmcmllbmRcclxuICBhc3luYyBhZGRGcmllbmQoeyBwYXJhbXMgfSwgcmVzKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kQnlJZChwYXJhbXMuaWQpO1xyXG4gICAgICB1c2VyLmZyaWVuZHMucHVzaChwYXJhbXMuZnJpZW5kSWQpO1xyXG4gICAgICB1c2VyLnNhdmUoKTtcclxuICAgICAgcmVzLnN0YXR1cygyMDApLnNlbmQoYEZyaWVuZCBSZW1vdmVkYCk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHt9XHJcbiAgfSxcclxuXHJcbiAgLy8gcmVtb3ZlIGZyaWVuZFxyXG4gIGFzeW5jIHJlbW92ZUZyaWVuZCh7IHBhcmFtcyB9LCByZXMpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRCeUlkQW5kVXBkYXRlKHBhcmFtcy5pZCwge1xyXG4gICAgICAgICRwdWxsOiB7IGZyaWVuZHM6IHBhcmFtcy5mcmllbmRJZCB9LFxyXG4gICAgICB9KTtcclxuICAgICAgcmVzLnN0YXR1cygyMDApLnNlbmQoYEZyaWVuZCBSZW1vdmVkYCk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHt9XHJcbiAgfSxcclxufTtcclxuXHJcbmV4cG9ydCA9IHVzZXJDb250cm9sbGVyO1xyXG4iXX0=