"use strict";
const models_1 = require("../models");
const userController = {
    async getAllUsers(req, res) {
        try {
            const users = await models_1.User.find({});
            res.json(users);
        }
        catch (err) {
            if (err)
                throw err;
        }
    },
    async getUser({ params }, res) {
        try {
            const user = await models_1.User.findById(params.id);
            if (!user) {
                res.status(404).send(`User Not Found`);
                return;
            }
            res.json(user);
        }
        catch (err) {
            if (err)
                throw err;
        }
    },
    async createUser({ body }, res) {
        try {
            const newUser = await models_1.User.create(body);
            res.status(201).send(`User ${newUser.username} created`);
        }
        catch (err) {
            if (err)
                throw err;
        }
    },
    async updateUser({ params, body }, res) {
        try {
            const user = await models_1.User.findByIdAndUpdate(params.id, body);
            if (!user) {
                res.status(404).send(`User Not Found`);
                return;
            }
            res.status(200).send(`User ${user} updated`);
        }
        catch (err) {
            if (err)
                throw err;
        }
    },
    async deleteUser({ params }, res) {
        try {
            const user = await models_1.User.findById(params.id);
            user.thoughts.map(async (thought) => {
                await models_1.Thoughts.findByIdAndDelete(thought);
            });
            const deletedUser = await models_1.User.findByIdAndDelete(params.id);
            res.status(200).send(`User #${params.id} deleted`);
        }
        catch (err) {
            if (err)
                throw err;
        }
    },
};
module.exports = userController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnRyb2xsZXJzL3VzZXItY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsc0NBQTJDO0FBRTNDLE1BQU0sY0FBYyxHQUFHO0lBRXJCLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLEdBQUc7UUFDeEIsSUFBSTtZQUNGLE1BQU0sS0FBSyxHQUFHLE1BQU0sYUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNsQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2pCO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixJQUFJLEdBQUc7Z0JBQUUsTUFBTSxHQUFHLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBR0QsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEdBQUc7UUFDM0IsSUFBSTtZQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sYUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDNUMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDVCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUN2QyxPQUFPO2FBQ1I7WUFDRCxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2hCO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixJQUFJLEdBQUc7Z0JBQUUsTUFBTSxHQUFHLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBR0QsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUc7UUFDNUIsSUFBSTtZQUNGLE1BQU0sT0FBTyxHQUFHLE1BQU0sYUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4QyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLE9BQU8sQ0FBQyxRQUFRLFVBQVUsQ0FBQyxDQUFDO1NBQzFEO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixJQUFJLEdBQUc7Z0JBQUUsTUFBTSxHQUFHLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBR0QsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHO1FBQ3BDLElBQUk7WUFDRixNQUFNLElBQUksR0FBRyxNQUFNLGFBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzNELElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1QsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDdkMsT0FBTzthQUNSO1lBQ0QsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLFVBQVUsQ0FBQyxDQUFDO1NBQzlDO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixJQUFJLEdBQUc7Z0JBQUUsTUFBTSxHQUFHLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBR0QsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEdBQUc7UUFDOUIsSUFBSTtZQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sYUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDNUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFO2dCQUNsQyxNQUFNLGlCQUFRLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDNUMsQ0FBQyxDQUFDLENBQUM7WUFDSCxNQUFNLFdBQVcsR0FBRyxNQUFNLGFBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDNUQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxNQUFNLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztTQUNwRDtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxHQUFHO2dCQUFFLE1BQU0sR0FBRyxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztDQUNGLENBQUM7QUFFRixpQkFBUyxjQUFjLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUaG91Z2h0cywgVXNlciB9IGZyb20gXCIuLi9tb2RlbHNcIjtcclxuXHJcbmNvbnN0IHVzZXJDb250cm9sbGVyID0ge1xyXG4gIC8vIGdldCBhbGwgdXNlcnMgZGF0YVxyXG4gIGFzeW5jIGdldEFsbFVzZXJzKHJlcSwgcmVzKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCB1c2VycyA9IGF3YWl0IFVzZXIuZmluZCh7fSk7XHJcbiAgICAgIHJlcy5qc29uKHVzZXJzKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBpZiAoZXJyKSB0aHJvdyBlcnI7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgLy8gZ2V0IHNpbmdsZSB1c2VyIGRhdGEgZnJvbSBpZFxyXG4gIGFzeW5jIGdldFVzZXIoeyBwYXJhbXMgfSwgcmVzKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kQnlJZChwYXJhbXMuaWQpO1xyXG4gICAgICBpZiAoIXVzZXIpIHtcclxuICAgICAgICByZXMuc3RhdHVzKDQwNCkuc2VuZChgVXNlciBOb3QgRm91bmRgKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgcmVzLmpzb24odXNlcik7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgaWYgKGVycikgdGhyb3cgZXJyO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIC8vIGNyZWF0ZSBuZXcgdXNlclxyXG4gIGFzeW5jIGNyZWF0ZVVzZXIoeyBib2R5IH0sIHJlcykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgbmV3VXNlciA9IGF3YWl0IFVzZXIuY3JlYXRlKGJvZHkpO1xyXG4gICAgICByZXMuc3RhdHVzKDIwMSkuc2VuZChgVXNlciAke25ld1VzZXIudXNlcm5hbWV9IGNyZWF0ZWRgKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBpZiAoZXJyKSB0aHJvdyBlcnI7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgLy8gdXBkYXRlIHVzZXIgZGF0YVxyXG4gIGFzeW5jIHVwZGF0ZVVzZXIoeyBwYXJhbXMsIGJvZHkgfSwgcmVzKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kQnlJZEFuZFVwZGF0ZShwYXJhbXMuaWQsIGJvZHkpO1xyXG4gICAgICBpZiAoIXVzZXIpIHtcclxuICAgICAgICByZXMuc3RhdHVzKDQwNCkuc2VuZChgVXNlciBOb3QgRm91bmRgKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgcmVzLnN0YXR1cygyMDApLnNlbmQoYFVzZXIgJHt1c2VyfSB1cGRhdGVkYCk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgaWYgKGVycikgdGhyb3cgZXJyO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIC8vIGRlbGV0ZSB1c2VyIGRhdGFcclxuICBhc3luYyBkZWxldGVVc2VyKHsgcGFyYW1zIH0sIHJlcykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZEJ5SWQocGFyYW1zLmlkKTtcclxuICAgICAgdXNlci50aG91Z2h0cy5tYXAoYXN5bmMgKHRob3VnaHQpID0+IHtcclxuICAgICAgICBhd2FpdCBUaG91Z2h0cy5maW5kQnlJZEFuZERlbGV0ZSh0aG91Z2h0KTtcclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnN0IGRlbGV0ZWRVc2VyID0gYXdhaXQgVXNlci5maW5kQnlJZEFuZERlbGV0ZShwYXJhbXMuaWQpO1xyXG4gICAgICByZXMuc3RhdHVzKDIwMCkuc2VuZChgVXNlciAjJHtwYXJhbXMuaWR9IGRlbGV0ZWRgKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBpZiAoZXJyKSB0aHJvdyBlcnI7XHJcbiAgICB9XHJcbiAgfSxcclxufTtcclxuXHJcbmV4cG9ydCA9IHVzZXJDb250cm9sbGVyO1xyXG4iXX0=