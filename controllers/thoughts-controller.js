"use strict";
const models_1 = require("../models");
const thoughts_1 = require("../models/thoughts");
const thoughtsController = {
    async getAllThoughts(req, res) {
        try {
            const thoughts = await thoughts_1.Thoughts.find({});
            res.json(thoughts);
        }
        catch (err) {
            if (err)
                throw err;
        }
    },
    async getThought({ params }, res) {
        try {
            const thought = await thoughts_1.Thoughts.findById(params.id);
            if (!thought) {
                res.status(404).send(`Thought Not Found`);
                return;
            }
            res.json(thought);
        }
        catch (err) {
            if (err)
                throw err;
        }
    },
    async createThought({ body }, res) {
        try {
            const newThought = await thoughts_1.Thoughts.create(body);
            const user = await models_1.User.findOneAndUpdate({ username: newThought.username }, { $addToSet: { thoughts: newThought._id } });
            res.status(201).send(`New thought posted by ${user.username}`);
        }
        catch (err) {
            if (err)
                throw err;
        }
    },
    async updateThought({ params, body }, res) {
        try {
            const updatedThought = await thoughts_1.Thoughts.findByIdAndUpdate(params.id, body);
            if (!updatedThought) {
                res.status(404).send(`Thought Not Found`);
                return;
            }
            res.status(200).send(`Thought updated`);
        }
        catch (err) { }
    },
    async deleteThought({ params }, res) {
        const id = params.id;
        try {
            const thought = await thoughts_1.Thoughts.findById(id);
            const deletedThought = await thoughts_1.Thoughts.findByIdAndDelete(id);
            const user = await models_1.User.findOneAndUpdate({ username: thought.username }, { $pullAll: { thoughts: [id] } });
            if (!deletedThought) {
                res.status(404).send(`Thought Not Found`);
                return;
            }
            if (!user) {
                console.log(`User not found`);
            }
            res.status(200).send(`Thought deleted`);
        }
        catch (err) { }
    },
    async createReaction({ params, body }, res) { },
};
module.exports = thoughtsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhvdWdodHMtY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb250cm9sbGVycy90aG91Z2h0cy1jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FBaUM7QUFDakMsaURBQThDO0FBRTlDLE1BQU0sa0JBQWtCLEdBQUc7SUFFekIsS0FBSyxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsR0FBRztRQUMzQixJQUFJO1lBQ0YsTUFBTSxRQUFRLEdBQUcsTUFBTSxtQkFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN6QyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3BCO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixJQUFJLEdBQUc7Z0JBQUUsTUFBTSxHQUFHLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBR0QsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEdBQUc7UUFDOUIsSUFBSTtZQUNGLE1BQU0sT0FBTyxHQUFHLE1BQU0sbUJBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRW5ELElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ1osR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztnQkFDMUMsT0FBTzthQUNSO1lBRUQsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNuQjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxHQUFHO2dCQUFFLE1BQU0sR0FBRyxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztJQUdELEtBQUssQ0FBQyxhQUFhLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHO1FBQy9CLElBQUk7WUFDRixNQUFNLFVBQVUsR0FBRyxNQUFNLG1CQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQy9DLE1BQU0sSUFBSSxHQUFHLE1BQU0sYUFBSSxDQUFDLGdCQUFnQixDQUN0QyxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsUUFBUSxFQUFFLEVBQ2pDLEVBQUUsU0FBUyxFQUFFLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUM1QyxDQUFDO1lBQ0YsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQ2hFO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixJQUFJLEdBQUc7Z0JBQUUsTUFBTSxHQUFHLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBR0QsS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHO1FBQ3ZDLElBQUk7WUFDRixNQUFNLGNBQWMsR0FBRyxNQUFNLG1CQUFRLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN6RSxJQUFJLENBQUMsY0FBYyxFQUFFO2dCQUNuQixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO2dCQUMxQyxPQUFPO2FBQ1I7WUFDRCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ3pDO1FBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRTtJQUNsQixDQUFDO0lBR0QsS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEdBQUc7UUFDakMsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUNyQixJQUFJO1lBQ0YsTUFBTSxPQUFPLEdBQUcsTUFBTSxtQkFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM1QyxNQUFNLGNBQWMsR0FBRyxNQUFNLG1CQUFRLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDNUQsTUFBTSxJQUFJLEdBQUcsTUFBTSxhQUFJLENBQUMsZ0JBQWdCLENBQ3RDLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFDOUIsRUFBRSxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQ2pDLENBQUM7WUFDRixJQUFJLENBQUMsY0FBYyxFQUFFO2dCQUNuQixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO2dCQUMxQyxPQUFPO2FBQ1I7WUFDRCxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzthQUMvQjtZQUNELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDekM7UUFBQyxPQUFPLEdBQUcsRUFBRSxHQUFFO0lBQ2xCLENBQUM7SUFHRCxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsSUFBRyxDQUFDO0NBQy9DLENBQUM7QUFDRixpQkFBUyxrQkFBa0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi4vbW9kZWxzXCI7XHJcbmltcG9ydCB7IFRob3VnaHRzIH0gZnJvbSBcIi4uL21vZGVscy90aG91Z2h0c1wiO1xyXG5cclxuY29uc3QgdGhvdWdodHNDb250cm9sbGVyID0ge1xyXG4gIC8vIGdldCBhbGwgdGhvdWdodHNcclxuICBhc3luYyBnZXRBbGxUaG91Z2h0cyhyZXEsIHJlcykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgdGhvdWdodHMgPSBhd2FpdCBUaG91Z2h0cy5maW5kKHt9KTtcclxuICAgICAgcmVzLmpzb24odGhvdWdodHMpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGlmIChlcnIpIHRocm93IGVycjtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICAvLyBnZXQgc2luZ2xlIHRob3VnaHRcclxuICBhc3luYyBnZXRUaG91Z2h0KHsgcGFyYW1zIH0sIHJlcykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgdGhvdWdodCA9IGF3YWl0IFRob3VnaHRzLmZpbmRCeUlkKHBhcmFtcy5pZCk7XHJcbiAgICAgIC8vIGluZm9ybSBjbGllbnQgaWYgdGhvdWdodCBpcyBub3QgZm91bmRcclxuICAgICAgaWYgKCF0aG91Z2h0KSB7XHJcbiAgICAgICAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoYFRob3VnaHQgTm90IEZvdW5kYCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIG90aGVyd2lzZSBzZW5kIHRob3VnaHQgYXMganNvblxyXG4gICAgICByZXMuanNvbih0aG91Z2h0KTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBpZiAoZXJyKSB0aHJvdyBlcnI7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgLy8gY3JlYXRlIHRob3VnaHRcclxuICBhc3luYyBjcmVhdGVUaG91Z2h0KHsgYm9keSB9LCByZXMpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IG5ld1Rob3VnaHQgPSBhd2FpdCBUaG91Z2h0cy5jcmVhdGUoYm9keSk7XHJcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRPbmVBbmRVcGRhdGUoXHJcbiAgICAgICAgeyB1c2VybmFtZTogbmV3VGhvdWdodC51c2VybmFtZSB9LFxyXG4gICAgICAgIHsgJGFkZFRvU2V0OiB7IHRob3VnaHRzOiBuZXdUaG91Z2h0Ll9pZCB9IH1cclxuICAgICAgKTtcclxuICAgICAgcmVzLnN0YXR1cygyMDEpLnNlbmQoYE5ldyB0aG91Z2h0IHBvc3RlZCBieSAke3VzZXIudXNlcm5hbWV9YCk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgaWYgKGVycikgdGhyb3cgZXJyO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIC8vIHVwZGF0ZSB0aG91Z2h0IGNvbnRlbnRcclxuICBhc3luYyB1cGRhdGVUaG91Z2h0KHsgcGFyYW1zLCBib2R5IH0sIHJlcykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgdXBkYXRlZFRob3VnaHQgPSBhd2FpdCBUaG91Z2h0cy5maW5kQnlJZEFuZFVwZGF0ZShwYXJhbXMuaWQsIGJvZHkpO1xyXG4gICAgICBpZiAoIXVwZGF0ZWRUaG91Z2h0KSB7XHJcbiAgICAgICAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoYFRob3VnaHQgTm90IEZvdW5kYCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKGBUaG91Z2h0IHVwZGF0ZWRgKTtcclxuICAgIH0gY2F0Y2ggKGVycikge31cclxuICB9LFxyXG5cclxuICAvL2RlbGV0ZSB0aG91Z2h0XHJcbiAgYXN5bmMgZGVsZXRlVGhvdWdodCh7IHBhcmFtcyB9LCByZXMpIHtcclxuICAgIGNvbnN0IGlkID0gcGFyYW1zLmlkO1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgdGhvdWdodCA9IGF3YWl0IFRob3VnaHRzLmZpbmRCeUlkKGlkKTtcclxuICAgICAgY29uc3QgZGVsZXRlZFRob3VnaHQgPSBhd2FpdCBUaG91Z2h0cy5maW5kQnlJZEFuZERlbGV0ZShpZCk7XHJcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRPbmVBbmRVcGRhdGUoXHJcbiAgICAgICAgeyB1c2VybmFtZTogdGhvdWdodC51c2VybmFtZSB9LFxyXG4gICAgICAgIHsgJHB1bGxBbGw6IHsgdGhvdWdodHM6IFtpZF0gfSB9XHJcbiAgICAgICk7XHJcbiAgICAgIGlmICghZGVsZXRlZFRob3VnaHQpIHtcclxuICAgICAgICByZXMuc3RhdHVzKDQwNCkuc2VuZChgVGhvdWdodCBOb3QgRm91bmRgKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCF1c2VyKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYFVzZXIgbm90IGZvdW5kYCk7XHJcbiAgICAgIH1cclxuICAgICAgcmVzLnN0YXR1cygyMDApLnNlbmQoYFRob3VnaHQgZGVsZXRlZGApO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7fVxyXG4gIH0sXHJcblxyXG4gIC8vIGNyZWF0ZSByZWFjdGlvblxyXG4gIGFzeW5jIGNyZWF0ZVJlYWN0aW9uKHsgcGFyYW1zLCBib2R5IH0sIHJlcykge30sXHJcbn07XHJcbmV4cG9ydCA9IHRob3VnaHRzQ29udHJvbGxlcjtcclxuIl19