"use strict";
const models_1 = require("../models");
const thoughts_1 = require("../models/thoughts");
const thoughtsController = {
    async getAllThoughts(req, res) {
        try {
            const thoughts = await thoughts_1.Thoughts.find({});
            res.json(thoughts);
        }
        catch (err) {
            if (err)
                throw err;
        }
    },
    async getThought({ params }, res) {
        try {
            const thought = await thoughts_1.Thoughts.findById(params.id);
            if (!thought) {
                res.status(404).send(`Thought Not Found`);
                return;
            }
            res.json(thought);
        }
        catch (err) {
            if (err)
                throw err;
        }
    },
    async createThought({ body }, res) {
        try {
            const newThought = await thoughts_1.Thoughts.create(body);
            const user = await models_1.User.findOneAndUpdate({ username: newThought.username }, { $addToSet: { thoughts: newThought._id } });
            res.status(201).send(`New thought posted by ${user.username}`);
        }
        catch (err) {
            if (err)
                throw err;
        }
    },
    async updateThought({ params, body }, res) {
        try {
            const updatedThought = await thoughts_1.Thoughts.findByIdAndUpdate(params.id, body);
            if (!updatedThought) {
                res.status(404).send(`Thought Not Found`);
                return;
            }
            res.status(200).send(`Thought updated`);
        }
        catch (err) { }
    },
    async deleteThought({ params }, res) {
        const id = params.id;
        try {
            const thought = await thoughts_1.Thoughts.findById(id);
            const deletedThought = await thoughts_1.Thoughts.findByIdAndDelete(id);
            const user = await models_1.User.findOneAndUpdate({ username: thought.username }, { $pullAll: { thoughts: [id] } });
            if (!deletedThought) {
                res.status(404).send(`Thought Not Found`);
                return;
            }
            if (!user) {
                console.log(`User not found`);
            }
            res.status(200).send(`Thought deleted`);
        }
        catch (err) { }
    },
};
module.exports = thoughtsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhvdWdodHMtY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb250cm9sbGVycy90aG91Z2h0cy1jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FBaUM7QUFDakMsaURBQThDO0FBRTlDLE1BQU0sa0JBQWtCLEdBQUc7SUFFekIsS0FBSyxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsR0FBRztRQUMzQixJQUFJO1lBQ0YsTUFBTSxRQUFRLEdBQUcsTUFBTSxtQkFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN6QyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3BCO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixJQUFJLEdBQUc7Z0JBQUUsTUFBTSxHQUFHLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBR0QsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEdBQUc7UUFDOUIsSUFBSTtZQUNGLE1BQU0sT0FBTyxHQUFHLE1BQU0sbUJBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRW5ELElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ1osR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztnQkFDMUMsT0FBTzthQUNSO1lBRUQsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNuQjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxHQUFHO2dCQUFFLE1BQU0sR0FBRyxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztJQUdELEtBQUssQ0FBQyxhQUFhLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHO1FBQy9CLElBQUk7WUFDRixNQUFNLFVBQVUsR0FBRyxNQUFNLG1CQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQy9DLE1BQU0sSUFBSSxHQUFHLE1BQU0sYUFBSSxDQUFDLGdCQUFnQixDQUN0QyxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsUUFBUSxFQUFFLEVBQ2pDLEVBQUUsU0FBUyxFQUFFLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUM1QyxDQUFDO1lBQ0YsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQ2hFO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixJQUFJLEdBQUc7Z0JBQUUsTUFBTSxHQUFHLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBR0QsS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHO1FBQ3ZDLElBQUk7WUFDRixNQUFNLGNBQWMsR0FBRyxNQUFNLG1CQUFRLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN6RSxJQUFJLENBQUMsY0FBYyxFQUFFO2dCQUNuQixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO2dCQUMxQyxPQUFPO2FBQ1I7WUFDRCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ3pDO1FBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRTtJQUNsQixDQUFDO0lBR0QsS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEdBQUc7UUFDakMsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUNyQixJQUFJO1lBQ0YsTUFBTSxPQUFPLEdBQUcsTUFBTSxtQkFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM1QyxNQUFNLGNBQWMsR0FBRyxNQUFNLG1CQUFRLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDNUQsTUFBTSxJQUFJLEdBQUcsTUFBTSxhQUFJLENBQUMsZ0JBQWdCLENBQ3RDLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFDOUIsRUFBRSxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQ2pDLENBQUM7WUFDRixJQUFJLENBQUMsY0FBYyxFQUFFO2dCQUNuQixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO2dCQUMxQyxPQUFPO2FBQ1I7WUFDRCxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzthQUMvQjtZQUNELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDekM7UUFBQyxPQUFPLEdBQUcsRUFBRSxHQUFFO0lBQ2xCLENBQUM7Q0FDRixDQUFDO0FBRUYsaUJBQVMsa0JBQWtCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4uL21vZGVsc1wiO1xyXG5pbXBvcnQgeyBUaG91Z2h0cyB9IGZyb20gXCIuLi9tb2RlbHMvdGhvdWdodHNcIjtcclxuXHJcbmNvbnN0IHRob3VnaHRzQ29udHJvbGxlciA9IHtcclxuICAvLyBnZXQgYWxsIHRob3VnaHRzXHJcbiAgYXN5bmMgZ2V0QWxsVGhvdWdodHMocmVxLCByZXMpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHRob3VnaHRzID0gYXdhaXQgVGhvdWdodHMuZmluZCh7fSk7XHJcbiAgICAgIHJlcy5qc29uKHRob3VnaHRzKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBpZiAoZXJyKSB0aHJvdyBlcnI7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgLy8gZ2V0IHNpbmdsZSB0aG91Z2h0XHJcbiAgYXN5bmMgZ2V0VGhvdWdodCh7IHBhcmFtcyB9LCByZXMpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHRob3VnaHQgPSBhd2FpdCBUaG91Z2h0cy5maW5kQnlJZChwYXJhbXMuaWQpO1xyXG4gICAgICAvLyBpbmZvcm0gY2xpZW50IGlmIHRob3VnaHQgaXMgbm90IGZvdW5kXHJcbiAgICAgIGlmICghdGhvdWdodCkge1xyXG4gICAgICAgIHJlcy5zdGF0dXMoNDA0KS5zZW5kKGBUaG91Z2h0IE5vdCBGb3VuZGApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICAvLyBvdGhlcndpc2Ugc2VuZCB0aG91Z2h0IGFzIGpzb25cclxuICAgICAgcmVzLmpzb24odGhvdWdodCk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgaWYgKGVycikgdGhyb3cgZXJyO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIC8vIGNyZWF0ZSB0aG91Z2h0XHJcbiAgYXN5bmMgY3JlYXRlVGhvdWdodCh7IGJvZHkgfSwgcmVzKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBuZXdUaG91Z2h0ID0gYXdhaXQgVGhvdWdodHMuY3JlYXRlKGJvZHkpO1xyXG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kT25lQW5kVXBkYXRlKFxyXG4gICAgICAgIHsgdXNlcm5hbWU6IG5ld1Rob3VnaHQudXNlcm5hbWUgfSxcclxuICAgICAgICB7ICRhZGRUb1NldDogeyB0aG91Z2h0czogbmV3VGhvdWdodC5faWQgfSB9XHJcbiAgICAgICk7XHJcbiAgICAgIHJlcy5zdGF0dXMoMjAxKS5zZW5kKGBOZXcgdGhvdWdodCBwb3N0ZWQgYnkgJHt1c2VyLnVzZXJuYW1lfWApO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGlmIChlcnIpIHRocm93IGVycjtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICAvLyB1cGRhdGUgdGhvdWdodCBjb250ZW50XHJcbiAgYXN5bmMgdXBkYXRlVGhvdWdodCh7IHBhcmFtcywgYm9keSB9LCByZXMpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHVwZGF0ZWRUaG91Z2h0ID0gYXdhaXQgVGhvdWdodHMuZmluZEJ5SWRBbmRVcGRhdGUocGFyYW1zLmlkLCBib2R5KTtcclxuICAgICAgaWYgKCF1cGRhdGVkVGhvdWdodCkge1xyXG4gICAgICAgIHJlcy5zdGF0dXMoNDA0KS5zZW5kKGBUaG91Z2h0IE5vdCBGb3VuZGApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICByZXMuc3RhdHVzKDIwMCkuc2VuZChgVGhvdWdodCB1cGRhdGVkYCk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHt9XHJcbiAgfSxcclxuXHJcbiAgLy9kZWxldGUgdGhvdWdodFxyXG4gIGFzeW5jIGRlbGV0ZVRob3VnaHQoeyBwYXJhbXMgfSwgcmVzKSB7XHJcbiAgICBjb25zdCBpZCA9IHBhcmFtcy5pZDtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHRob3VnaHQgPSBhd2FpdCBUaG91Z2h0cy5maW5kQnlJZChpZCk7XHJcbiAgICAgIGNvbnN0IGRlbGV0ZWRUaG91Z2h0ID0gYXdhaXQgVGhvdWdodHMuZmluZEJ5SWRBbmREZWxldGUoaWQpO1xyXG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kT25lQW5kVXBkYXRlKFxyXG4gICAgICAgIHsgdXNlcm5hbWU6IHRob3VnaHQudXNlcm5hbWUgfSxcclxuICAgICAgICB7ICRwdWxsQWxsOiB7IHRob3VnaHRzOiBbaWRdIH0gfVxyXG4gICAgICApO1xyXG4gICAgICBpZiAoIWRlbGV0ZWRUaG91Z2h0KSB7XHJcbiAgICAgICAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoYFRob3VnaHQgTm90IEZvdW5kYCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICghdXNlcikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBVc2VyIG5vdCBmb3VuZGApO1xyXG4gICAgICB9XHJcbiAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKGBUaG91Z2h0IGRlbGV0ZWRgKTtcclxuICAgIH0gY2F0Y2ggKGVycikge31cclxuICB9LFxyXG59O1xyXG5cclxuZXhwb3J0ID0gdGhvdWdodHNDb250cm9sbGVyO1xyXG4iXX0=